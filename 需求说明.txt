以下是将原本基于 SwiftUI + Apple 生态的账号密码管理应用需求，改写为面向 Web 平台，使用 React + TypeScript + Vite 技术栈的版本：

⸻

账号密码管理 Web 应用需求文档（基于 React + TypeScript + Vite）

一、项目简介

本项目是一款基于 Web 平台开发的账号密码管理应用，采用 React + TypeScript + Vite 技术栈，目标是为用户提供安全、高效、跨平台（浏览器可访问）的账号密码管理工具。后续可拓展至 PWA（Progressive Web App）以支持安装至桌面或移动设备。

⸻

二、核心需求

1. 跨平台支持
	•	支持主流桌面与移动端浏览器访问（Chrome、Safari、Edge 等）；
	•	可选支持 PWA 模式，实现「类原生应用体验」（支持离线访问、图标安装等）；
	•	使用响应式布局适配不同屏幕尺寸（PC、平板、手机）；

2. 基础功能模块

2.1 账号信息管理
	•	支持添加多个账号记录，包含以下字段：
	•	平台名称（如 GitHub、Google 等）
	•	用户名 / 邮箱 / 手机号
	•	密码
	•	备注信息
	•	标签（如「工作」、「个人」、「游戏」等，可选）
	•	支持编辑、删除账号记录；
	•	支持模糊搜索、标签筛选等功能；

2.2 快捷操作
	•	每个账号项支持一键复制用户名和密码至剪贴板；
	•	可配置「一键登录网址」，点击后自动复制并跳转对应链接；

2.3 数据同步
	•	支持用户账号系统（如使用 Firebase Auth、Supabase Auth 或 OAuth 第三方登录）；
	•	数据同步通过后端 API 实现跨设备同步，可选使用 Supabase、Firebase、或自建服务；
	•	支持离线操作与自动同步机制（IndexedDB + 本地状态缓存）；

2.4 登录 / 身份验证
	•	用户首次使用需注册/登录账号（邮箱、社交账号登录等）；
	•	支持登录状态持久化（JWT / OAuth）；
	•	支持用户启用应用层密码锁，结合浏览器提供的 WebAuthn 或本地密码进行身份验证；
	•	支持访客模式，仅在当前会话中本地存储账号数据，关闭浏览器后自动清除；

⸻

三、界面设计需求

1. 风格
	•	采用简洁、现代化 UI 风格（推荐使用 Tailwind CSS）；
	•	支持浅色 / 深色模式（基于系统偏好或用户设置）；
	•	提供统一的组件库（可使用 shadcn/ui、Radix UI 等）以保证一致性；

2. 用户体验
	•	添加账号流程不超过两步；
	•	支持滑动删除（移动端）、长按菜单、右键菜单（桌面端）等常见交互；
	•	支持快捷键操作：
	•	Ctrl/Cmd + N：新增账号
	•	Ctrl/Cmd + F：搜索
	•	Esc：关闭弹窗/返回主界面等

⸻

四、安全性需求
	•	所有账号密码信息均使用前端本地加密（建议使用 crypto.subtle API 或 libsodium 等加密库）；
	•	支持主密码机制：所有数据加密密钥由用户设置的主密码派生（PBKDF2 / Argon2）；
	•	剪贴板敏感信息支持 60 秒自动清除机制（可通过计时器控制）；
	•	所有同步数据应在客户端加密，后端仅存储密文（端到端加密）；

⸻

五、可扩展功能建议（后续迭代）
	1.	密码生成器：支持生成复杂密码并自定义规则（长度、字符集等）；
	2.	账号导入导出：支持 CSV / JSON 格式；
	3.	账号历史记录与版本回退：支持误删恢复；
	4.	密码更新提醒：如某账号密码超过设定天数，自动提醒；
	5.	多用户支持：同一浏览器下切换不同用户账户；
	6.	PWA 桌面图标与快捷方式支持；
	7.	标签管理与文件夹分组：适用于账号较多的用户；

⸻

六、非功能性需求
	•	启动速度：页面初次加载时间 ≤ 2 秒（采用懒加载、代码拆分等技术优化）；
	•	兼容性：兼容主流浏览器（Chrome 100+、Safari 15+、Edge 100+）；
	•	响应速度：用户界面交互响应时间 ≤ 100ms；
	•	国际化支持：初期支持中英文（可使用 i18next / react-intl 实现多语言切换）；

⸻


详细说明：

以下是基于需求文档整理的项目设计页面，结合 React + TypeScript + Vite 技术栈特性，采用模块化设计思路：


### **一、核心页面结构**
```
src/
├── routes/                # 路由配置
│   ├── AuthRoutes.tsx     # 认证相关路由（登录/注册/访客模式）
│   └── AppRoutes.tsx      # 主应用路由（账号管理等）
├── pages/                 # 页面组件
│   ├── Auth/             # 认证模块
│   │   ├── Login.tsx      # 登录页面
│   │   ├── Register.tsx   # 注册页面
│   │   └── GuestMode.tsx  # 访客模式入口
│   ├── Dashboard/        # 主仪表盘（账号管理）
│   │   ├── Index.tsx      # 账号列表主界面
│   │   ├── AddAccount.tsx # 添加账号弹窗/页面
│   │   └── EditAccount.tsx# 编辑账号弹窗/页面
│   ├── Settings/         # 设置模块
│   │   ├── Security.tsx   # 安全设置（主密码、加密配置）
│   │   ├── Theme.tsx      # 主题设置（明暗模式）
│   │   └── Sync.tsx       # 数据同步设置
│   └── Error/            # 错误页面（404等）
├── components/            # 通用组件库
│   ├── AuthForm/          # 认证表单组件
│   ├── AccountCard/       # 账号卡片组件（支持复制、删除等操作）
│   ├── SearchBar/         # 搜索栏组件
│   └── Modal/             # 弹窗组件（添加/编辑账号）
├── hooks/                 # 自定义Hook（数据同步、加密逻辑等）
├── services/              # 服务层（API请求、加密处理、本地存储）
└── styles/                # 样式文件（Tailwind CSS配置）
```


### **二、关键页面设计**

#### **1. 登录/注册页面（Auth/Login.tsx & Auth/Register.tsx）**
- **核心功能**：
  - 支持邮箱/社交账号登录（OAuth按钮）；
  - 访客模式入口（独立按钮，数据不持久化）；
  - 记住密码选项（JWT持久化存储）；
  - 「忘记主密码」找回流程（需结合后端验证）。
- **UI布局**：
  ```tsx
  // 示例组件结构（使用shadcn/ui组件）
  <div className="min-h-screen bg-gray-100">
    <div className="flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
          登录账号
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <AuthForm type="login" /> {/* 复用认证表单组件 */}
          <div className="mt-6">
            <button
              onClick={() => switchToGuestMode()}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              以访客模式使用（数据不保存）
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  ```

#### **2. 账号管理主界面（Dashboard/Index.tsx）**
- **核心布局**：
  - 顶部栏：搜索框（Ctrl/Cmd + F触发）、新增按钮（Ctrl/Cmd + N）、主题切换按钮、设置入口；
  - 主体区域：响应式网格布局（账号卡片列表），支持标签筛选栏；
  - 移动端适配：滑动删除账号卡片，长按显示操作菜单。
- **交互逻辑**：
  ```tsx
  // 示例数据结构
  interface Account {
    id: string;
    platform: string;
    username: string;
    password: string; // 加密存储，不直接渲染
    url: string;
    tags: string[];
    createdAt: Date;
  }

  // 关键功能组件
  <SearchBar onSearch={handleSearch} />
  <TagFilter tags={allTags} onFilter={handleTagFilter} />
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
    {filteredAccounts.map((account) => (
      <AccountCard
        key={account.id}
        account={account}
        onCopyPassword={() => handleCopy(account.password)}
        onDelete={() => handleDelete(account.id)}
        onLogin={() => handleLogin(account.url)}
      />
    ))}
  </div>
  ```

#### **3. 添加/编辑账号弹窗（components/Modal/AddAccount.tsx）**
- **设计要点**：
  - 两步流程：第一步填写基础信息（平台、用户名、密码），第二步选填标签和备注；
  - 密码强度提示（使用正则或第三方库检测）；
  - 支持「一键生成密码」按钮（调用后续迭代的密码生成器功能）。
- **组件结构**：
  ```tsx
  <Modal isOpen={isModalOpen} onClose={handleClose}>
    <ModalHeader>
      {isEditMode ? '编辑账号' : '添加新账号'}
    </ModalHeader>
    <ModalBody>
      <form onSubmit={handleSubmit}>
        <InputField label="平台名称" name="platform" required />
        <InputField
          label="用户名/邮箱"
          name="username"
          type="email"
          required
        />
        <PasswordField
          label="密码"
          name="password"
          showStrength
          autoGenerate={!isEditMode} // 新增时默认生成密码
        />
        {/* 第二步：标签和备注（使用Tab切换或折叠面板） */}
        <div className="mt-4">
          <TagSelect tags={allTags} onChange={handleTagChange} />
          <Textarea label="备注" name="notes" rows={3} />
        </div>
      </form>
    </ModalBody>
  </Modal>
  ```

#### **4. 设置页面（Settings/Security.tsx & Settings/Theme.tsx）**
- **安全设置**：
  - 主密码管理（修改主密码、验证当前密码）；
  - 加密算法配置（PBKDF2/Argon2参数调整，高级功能）；
  - 数据同步服务切换（Supabase/Firebase/自建API）。
- **主题设置**：
  - 明暗模式切换（系统自动/手动切换）；
  - 自定义颜色方案（通过Tailwind CSS变量实现）；
  - 字体大小调整（响应式设计适配）。


### **三、技术实现要点**
1. **路由与导航**：
   - 使用 `react-router-dom` 配置路由，保护路由需验证用户登录状态；
   - 访客模式路由单独隔离，数据存储于 `sessionStorage` 并在会话结束后清除。

2. **数据加密与同步**：
   - 前端加密：使用 `libsodium` 实现AES-GCM加密，主密码通过Argon2派生密钥；
   - 本地存储：`IndexedDB` 存储加密后的数据，结合 `useEffect` 监听同步状态；
   - 同步逻辑：通过WebSocket或轮询调用后端API，实现离线操作自动同步（需处理冲突）。

3. **性能优化**：
   - Vite代码拆分与懒加载：动态导入非核心组件（如密码生成器）；
   - 列表虚拟化：使用 `react-window` 优化长列表渲染性能；
   - PWA配置：通过 `vite-plugin-pwa` 生成 manifest 文件，实现离线缓存。

4. **跨平台交互**：
   - 移动端：使用 `react-hammerjs` 处理滑动/长按事件；
   - 桌面端：监听 `onContextMenu` 实现右键菜单，快捷键通过 `useHotkeys` 库管理。


### **四、扩展功能预留**
- **密码生成器**：独立组件 `PasswordGenerator.tsx`，支持配置字符集、长度，并实时预览；
- **导入导出**：使用 `papaparse` 解析CSV，加密后通过Blob下载/上传；
- **多用户切换**：在设置中添加用户管理模块，使用不同的加密密钥区分数据。

通过以上设计，可实现需求文档中描述的核心功能，并为后续迭代提供清晰的扩展接口。